From a7c959cbd5282fc229cd0f0f1fbfa0ccc1250520 Mon Sep 17 00:00:00 2001
Message-Id: <a7c959cbd5282fc229cd0f0f1fbfa0ccc1250520.1516293554.git.dongsu@kinvolk.io>
In-Reply-To: <cover.1516293554.git.dongsu@kinvolk.io>
References: <cover.1516293554.git.dongsu@kinvolk.io>
From: Dongsu Park <dongsu@kinvolk.io>
Date: Thu, 18 Jan 2018 16:05:25 +0100
Subject: [PATCH v6 05/13] capabilities: introduce a new helper
 ns_capable_wrt_inode_uidgid

From: Dongsu Park <dongsu@kinvolk.io>

Let's introduce a new helper ns_capable_wrt_inode_uidgid(), which returns
true if an inode is ns_capable w.r.t to its superblock's user namespace,
and its uid and gid are mapped. This will be needed by later in the next
patch that checks for additional conditions in should_remove_suid().

Cc: linux-security-module@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: Serge Hallyn <serge@hallyn.com>
Cc: Seth Forshee <seth.forshee@canonical.com>
Signed-off-by: Dongsu Park <dongsu@kinvolk.io>
---
 include/linux/capability.h |  2 ++
 kernel/capability.c        | 17 +++++++++++++++++
 2 files changed, 19 insertions(+)

diff --git a/include/linux/capability.h b/include/linux/capability.h
index f640dcbc..d6b7f29d 100644
--- a/include/linux/capability.h
+++ b/include/linux/capability.h
@@ -243,6 +243,8 @@ static inline bool ns_capable_noaudit(struct user_namespace *ns, int cap)
 #endif /* CONFIG_MULTIUSER */
 extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
 extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
+extern bool ns_capable_wrt_inode_uidgid(struct user_namespace *ns,
+					const struct inode *inode, int cap);
 extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
 extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
 
diff --git a/kernel/capability.c b/kernel/capability.c
index 1e1c0236..680bbb71 100644
--- a/kernel/capability.c
+++ b/kernel/capability.c
@@ -489,6 +489,23 @@ bool capable_wrt_inode_uidgid(const struct inode *inode, int cap)
 EXPORT_SYMBOL(capable_wrt_inode_uidgid);
 
 /**
+ * ns_capable_wrt_inode_uidgid - Check ns_capable and uid and gid mapped
+ * @ns: The user namespace in question
+ * @inode: The inode in question
+ * @cap: The capability in question
+ *
+ * Return true if the current task has the given capability targeted at
+ * the given user namespace and that the given inode's uid and gid are
+ * mapped into the current user namespace.
+ */
+bool ns_capable_wrt_inode_uidgid(struct user_namespace *ns,
+				 const struct inode *inode, int cap)
+{
+	return ns_capable(ns, cap) && privileged_wrt_inode_uidgid(ns, inode);
+}
+EXPORT_SYMBOL(ns_capable_wrt_inode_uidgid);
+
+/**
  * ptracer_capable - Determine if the ptracer holds CAP_SYS_PTRACE in the namespace
  * @tsk: The task that may be ptraced
  * @ns: The user namespace to search for CAP_SYS_PTRACE in
-- 
2.13.6

